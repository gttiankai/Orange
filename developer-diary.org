* 开发日记
** <2014-07-24 Thu>
*** DONE 基本的git仓库的建立，以及对git仓库的一些初始化和设置的问题。
CLOSED: [2014-07-29 Tue 21:26]
- State "DONE"       from ""           [2014-07-29 Tue 21:26]
*** DONE 看完了《orange》的第一章
CLOSED: [2014-07-29 Tue 21:26]
- State "DONE"       from ""           [2014-07-29 Tue 21:26]
** <2014-07-29 Tue>
*** DONE 安装bochs和配置bochs
CLOSED: [2014-07-29 Tue 22:40]
- State "DONE"       from "TODO"       [2014-07-29 Tue 22:40]
**** 安装bochs遇到问题
.fatal error: gtk/gtk.h: No such file or directory

solved：
- 将`pkg-config gtk+-2.0 --cflags --lib`添加的到bochs下的Makefile的LIBS变量以及bochs下的gui的下Makefile中的LIBS中
- ./config .....
- make 
- sudo make install

**** bochs的配置
- couldn't open ROM image file '/usr/share/bochs/BIOS-bochs-latest

solution: 
modyfy the bochsrc file
romimage: file=/usr/local/share/bochs/BIOS-bochs-latest

- can not stat keymap file 'usr/share/bochskeymaps/x11-pc-us.map'
solution:
 将bochsrc文件中最后一行keyboard_ mapping: enabled=1, map=/usr/share/bochs/keymaps/x11-pc-us.map改为

              　　keyboard_ mapping: enabled=1, map=/usr/local/share/bochs/keymaps/x11-pc-us.map #/usr/share/bochs/keymaps　　 

  　　　　　  /x11-pc-us.map
*** DONE read the chapter of the book <Orange's>
CLOSED: <2014-07-29 Tue 22:47>
- State "DONE"       from "TODO"       [2014-07-29 Tue 22:47]
主要是看了一些调试常用的命令，这是比较重要的，以后要多用一用。
** <2014-07-30 Wed> 
*** TODO read the book of chapter 3
**** pmtest1.asm 的编写遇到问题。
不能在屏幕上显示红色的“p”
** <2014-08-02 Sat 12:31>
*** 完成dos使用的引导
**** 在下面的网址下载freedos
http://bochs.sourceforge.net/diskimages.html
，然后按照书本上的说明安装一下。

**** 挂载点 /mnt/floppy不存在，
自己创建就可以了，但是要注意，要开着bochs，并且把b，格式化之后才行。
*** 阅读pmtest1.asm
**** 指令EQU 
EQU不是指令集中的指令而是一条伪指令，在程序中多次出现同一个表达式，为了方便，可以用赋值伪操作给表达式赋予一个名字，就叫equ，我的理解就是equ可以类比为C语言中的宏定义。

**** org
汇编语言中的一条指令，作用：告诉汇编程序，在执行的时候，将某段机器语言装载到内存中的哪个地址，也是伪指令
*** 阅读王爽的《汇编语言》<2014-08-02 Sat>--<2014-08-09 Sat>
**** 通用寄存器
- AX = AH + AL
- BX
- CX
- DX
**** 字在寄存器中的存储
byte = 8bites
word = 2 bytes = 16 bites

**** 段寄存器
- CS  
- DS
- SS : 段寄存器,存放栈的段地址
- ES 
- IP :

- SP : 存放栈结构的偏移地址
物理地址 = 段地址 × 16 +　偏移量 

物理地址（8086） = CS*16 + IP

**** DS 和 [address]
带[]都表示一个地址。这一点可以记住。 8086CPU,不支持将数据直接放入段寄存器的操作。所以必须使用一个额外的寄存器进行中转。
**** 栈段
只要我们将SS:SP指向我们定义的段，就可以在相应的内存地址上做pop和push操作。这一点上可以看出在CPU看来，内存中的所有地址都是一段平坦的内存空间，我们可以定义一段内存空间具有特殊的含义，进行特殊的操作。
**** Think
8086这个寄存器感觉比较奇怪，他的地址总线是20bites，可以寻址1M的内存地址，但是它里面的寄存器却是16位的，只能计算16位的数据，这就为寻址等操作造成了很大的麻烦，所以才诞生了“段基址×16 + 偏移地址 = 物理地址”这种东东。
**** 8086CPU的局限性
没有提供对栈操作越界的检查，所以造成了安全问题。
**** 第一个小型汇编程序
汇编程序分为“汇编指令”和“伪指令”，汇编指令会翻译成相应的机器码，伪指令是给编译器看的，告诉编译器某些信息，不会编译成机器码，主要是帮助编译汇编指令。

**** 汇编程序的语法
***** 段的定义
xxxx segment
.
.
.
xxxx ends

伪指令，告诉编译器这是一个段，段的是名字xxxx


***** end
end 表示一个汇编程序的结束。必须在每段程序的手机号苏的时候协商这一段，否则编译器不知道程序在何处结束。

注意和ends的区别。

***** assume 假设
它假设莫某一段寄存器和程序中某一个用 segment...ends定义的段相关联。

***** 标号
codesg表示一个标号，其实就是一个地址。

